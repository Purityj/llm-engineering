import requests, subprocess
from bs4 import BeautifulSoup
from openai import OpenAI
"""
 Fetches the content of a webpage, removes non-informative elements,    
 and generates a summary of the text using Ollama which we connect by 
 1. direct Ollama API
 2. OpenAI python library
 BeautifulSoup to parse the HTML.
"""
OLLAMA_API="http://localhost:11434/api/chat"
REQUEST_HEADERS={"Content-Type": "application/json"}
SCRAPER_HEADERS = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"}  
MODEL="llama3.2"

class Website:
    """
    Represents a website by extracting its title and main readable content.
    
    This class makes an HTTP request to the given URL, parses the HTML, 
    removes non-informative elements (like scripts, styles, images, inputs),
    and extracts clean text content from the body of the page.
    """
    def __init__(self, url):
        self.url = url
        response = requests.get(url, headers=SCRAPER_HEADERS)
        soup = BeautifulSoup(response.content, 'html.parser')
        self.title = soup.title.string if soup.title else 'No title found'
        for irrelevant in soup.body(["script", "style", "img", "input"]):
            irrelevant.decompose()
        self.text = soup.body.get_text(separator="\n", strip=True)

ed = Website("https://edwarddonner.com")
print(ed.title)

system_prompt = "You are an assistant that analyzes the contents of a website \
and provides a short summary, ignoring text that might be navigation related. \
Respond in markdown."

def user_prompt_for(website):
    user_prompt = f"You are looking at a website titled {website.title}"
    user_prompt += "\nThe contents of this website is as follows; \
please provide a short summary of this website in markdown. \
If it includes news or announcements, then summarize these too.\n\n"
    user_prompt += website.text
    return user_prompt

# summarize with ollama via OpenAI python library
def summarize(url):
    ollama_via_openai = OpenAI(base_url='http://localhost:11434/v1', api_key='ollama')

    website = Website(url)

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt_for(website)}
    ]
    response = ollama_via_openai.chat.completions.create(
        model = "llama3.2",
        messages = messages
    )
    return response.choices[0].message.content
summary = summarize("https://edwarddonner.com")
print("SUMMARY USING OLLAMA VIA OPENAI PYTHON LIBRARY")
print(summary)


# summarize using ollama API
def summarize_website(url):
    website = Website(url)
    payload = {
        "model": MODEL,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt_for(website)}
        ],
        "stream": False,  #wait until the full response is generated, then return it all together
    }
    response = requests.post(OLLAMA_API, json=payload, headers=REQUEST_HEADERS)
    return response.json()['message']['content']
summary = summarize_website("https://edwarddonner.com")
print("SUMMARY USING OLLAMA API")
print(summary)